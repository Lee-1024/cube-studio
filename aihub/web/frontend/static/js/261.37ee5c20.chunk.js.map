{"version":3,"file":"static/js/261.37ee5c20.chunk.js","mappings":"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","sources":["pages/Index/Index.tsx","api/mobiApi.ts"],"sourcesContent":["import { GithubOutlined } from '@ant-design/icons'\nimport { Button, Form, message, Result, Tag } from 'antd'\nimport React, { useEffect, useState } from 'react'\nimport { IAppInfo, IResultItem } from '../../api/interface/stateInterface'\nimport { getAppInfo, submitData } from '../../api/mobiApi'\n\nimport AwesomeSlider from 'react-awesome-slider';\n// @ts-ignore\nimport withAutoplay from 'react-awesome-slider/dist/autoplay';\nimport 'react-awesome-slider/dist/styles.css';\nimport DynamicForm, { IDynamicFormConfigItem } from '../../components/DynamicForm/DynamicForm'\nimport Checkbox from '../../components/CheckoutGroupPlus/CheckoutGroupPlus'\n\nconst AutoplaySlider = withAutoplay(AwesomeSlider);\n\n// import './Index.less';\n\nexport default function Index() {\n    const [pageInfo, setPageInfo] = useState<IAppInfo>()\n    const [dynamicFormConfig, setDynamicFormConfig] = useState<IDynamicFormConfigItem[]>([])\n    const [reslutList, setReslutList] = useState<IResultItem[]>([])\n    const [selected, setSelected] = useState<any[]>([])\n    const [form] = Form.useForm();\n\n    useEffect(() => {\n        getAppInfo().then(res => {\n            const data = res.data\n            console.log(data);\n            setPageInfo(data)\n            const tarConfig = createDyFormConfig(data.inference_inputs, {}, {})\n            setDynamicFormConfig(tarConfig)\n\n            console.log(tarConfig);\n        }).catch(err => { })\n    }, [])\n\n    // 表单字段处理\n    const createDyFormConfig = (data: Record<string, any>[], label_columns: Record<string, any>, description_columns: Record<string, any>): IDynamicFormConfigItem[] => {\n        const typeMap: any = {\n            text: 'input',\n            text_select: 'select',\n            text_select_multi: 'select',\n            image: 'imageUpload',\n            video: 'videoUpload',\n            audio: 'audioUpload',\n            file: 'fileUpload',\n            image_multi: 'imageUpload',\n            video_multi: 'videoUpload',\n            image_select: 'imageSelect',\n            image_select_multi: 'imageSelect',\n\n        }\n\n        return data.map((item, index) => {\n            let type = typeMap[item.type]\n            const label = item.label || label_columns[item.name]\n\n            // 校验规则\n            const rules = (item.validators || []).map((item: any) => {\n                if (type === 'select') {\n                    return item.type === 'DataRequired' ? { required: true, message: `请选择${label}` } : undefined\n                }\n\n                switch (item.type) {\n                    case 'DataRequired':\n                        return { required: true, message: `请输入${label}` }\n                    case 'Regexp':\n                        return { pattern: new RegExp(`${item.regex}`), message: `请按正确的规则输入` }\n                    case 'Length':\n                        return { min: item.min || 0, max: item.max, message: `请输入正确的长度` }\n                    default:\n                        return undefined\n                }\n            }).filter((item: any) => !!item)\n\n            const list = createDyFormConfig((item.info || []), label_columns, description_columns)\n\n            const res: IDynamicFormConfigItem = {\n                label,\n                type,\n                // rules,\n                list,\n                name: item.name,\n                disable: item.disable,\n                description: item.describe || undefined,\n                required: item.required,\n                defaultValue: item.default === '' ? undefined : item.default,\n                multiple: item['ui-type'] && item['ui-type'] === 'select2',\n                options: (item.values || []).map((item: any) => ({ label: item.value, value: item.id })),\n                data: { ...item }\n            }\n            return res\n        })\n    }\n\n    return (\n        <div>\n            <div className=\"p16 bg-w\">\n                <div>\n                    <img className=\"w100 pb8\" style={{ maxHeight: 600 }} src={pageInfo?.pic || ''} alt=\"\" />\n                </div>\n                <div className=\"fs20 pb4\" onClick={() => {\n                    window.open(pageInfo?.doc, 'blank')\n                }}><strong>{pageInfo?.name} [{pageInfo?.label}]</strong> <span><GithubOutlined /></span></div>\n                <div className=\"pb4\">{pageInfo?.describe}</div>\n                <div>\n                    <Tag color=\"volcano\">{pageInfo?.scenes}</Tag>\n                    <Tag color=\"green\">{pageInfo?.status}</Tag>\n                </div>\n            </div>\n            <div className=\"ta-r pr16 c-hint-b\">\n                {pageInfo?.version}\n            </div>\n\n            <div className=\"ta-c pb8\">\n                <div className=\"title-mobi\">\n                    应用演示\n                </div>\n            </div>\n\n            <div className=\"p16 mb16\">\n                {/* <Checkbox.GroupImageIn\n                    values={selected}\n                    onChange={(selected: any) => {\n                        setSelected(selected)\n                    }}\n                    option={[{ label: 'http://localhost:8080/app1/static/example/风格1.jpg', value: '风格1' }, { label: 'http://localhost:8080/app1/static/example/风格1.jpg', value: '风格2' }]} /> */}\n                <Form layout=\"horizontal\" form={form} >\n                    <DynamicForm form={form} primaryKey={'target'} config={dynamicFormConfig} />\n                </Form>\n                <div className=\"ta-c\">\n                    <Button type=\"primary\" block onClick={() => {\n                        form.validateFields().then(values => {\n                            console.log(values)\n                            submitData(pageInfo?.inference_url || '', values).then(res => {\n                                console.log(res)\n                                setReslutList(res.data.result)\n                            }).catch(err => {\n                                message.error('应用运行出问题了')\n                            })\n                        }).catch(err => {\n                            message.warn('请填写完整参数')\n                        })\n                    }}>运行应用</Button>\n                </div>\n            </div>\n\n            <div className=\"mb16\">\n                <div className=\"ta-c pb8\">\n                    <div className=\"title-mobi\">\n                        结果输出\n                </div>\n                </div>\n\n                {\n                    reslutList.length ? <div className=\"p16\">\n                        {\n                            reslutList.map((result, resultIndex) => {\n                                return <div key={resultIndex}>\n                                    <div>{result.text}</div>\n                                    <div><img src={result.image} alt=\"\" /></div>\n                                    <div>{result.video}</div>\n                                </div>\n                            })\n                        }\n                    </div> : <Result\n                            // icon={<SmileOutlined />}\n                            title=\"暂无数据\"\n                        />\n                }\n            </div>\n\n            <div className=\"ta-c pb8\">\n                <div className=\"title-mobi\">\n                    应用推荐\n                </div>\n            </div>\n\n            <div className=\"p16 mb64\">\n                <AutoplaySlider\n                    play={true}\n                    cancelOnInteraction={false} // should stop playing on user interaction\n                    interval={5000}\n                >\n                    {\n                        (pageInfo?.rec_apps || []).map((item, recIndex) => {\n                            return <div key={`rec${recIndex}`}>\n                                <img className=\"w100\" src={item.pic} alt=\"\" />\n                            </div>\n                        })\n                    }\n                </AutoplaySlider>\n            </div>\n        </div>\n    )\n}\n","import { AxiosResponse } from 'axios'\nimport axios, { AxiosResFormat } from '.'\nimport { IADUGTemplateInfo, IAppHeaderItem, IAppMenuItem, ICustomDialog } from './interface/kubeflowInterface'\nimport { IAppInfo, IResultItem } from './interface/stateInterface'\n\nexport const getAppInfo = (): Promise<AxiosResponse<IAppInfo>> => {\n    return axios.get('/app1/info')\n}\n\nexport const submitData = (url: string, data: Record<any, any>): Promise<AxiosResponse<{\n    result: IResultItem[]\n}>> => {\n    return axios.post(url, data)\n}\n\n"],"names":["AutoplaySlider","withAutoplay","AwesomeSlider","Index","useState","pageInfo","setPageInfo","dynamicFormConfig","setDynamicFormConfig","reslutList","setReslutList","Form","form","useEffect","axios","then","res","data","console","log","tarConfig","createDyFormConfig","inference_inputs","catch","err","label_columns","description_columns","typeMap","text","text_select","text_select_multi","image","video","audio","file","image_multi","video_multi","image_select","image_select_multi","map","item","index","type","label","name","list","validators","required","message","undefined","pattern","RegExp","regex","min","max","filter","info","disable","description","describe","defaultValue","default","multiple","options","values","value","id","className","style","maxHeight","src","pic","alt","onClick","window","open","doc","GithubOutlined","color","scenes","status","version","layout","DynamicForm","primaryKey","config","block","validateFields","url","inference_url","result","length","resultIndex","title","play","cancelOnInteraction","interval","rec_apps","recIndex"],"sourceRoot":""}